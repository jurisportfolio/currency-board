{"version":3,"sources":["components/ExRateComponent/ExRateDisplay.js","utilities/actions.js","components/ExRateComponent/ExRateSetter.js","utilities/fetchRate.js","components/ExRateComponent/ExRateFetcher.js","components/ExRateComponent/ExRateComponent.js","utilities/uuidGenerator.js","components/NewTransactionComponent/NewTransactionComponent.js","components/TransactionsDisplayComponent/TransactionsDisplayComponent.js","components/TransactionsDisplayComponent/BiggestTransDisplayComponent.js","components/TransSumComponent/TransSumComponent.js","components/DashboardComponent.js","App.js","serviceWorker.js","utilities/reducers.js","index.js"],"names":["connect","state","exRate","SET_RATE","ADD_TRANSACTION","REMOVE_TRANSACTION","FETCH_RATE_SUCCESS","setRate","type","dispatchForExRateSetter","rateInput","React","createRef","onSubmit","event","preventDefault","parseFloat","current","value","name","step","max","min","defaultValue","ref","fetchRate","dispatch","fetch","then","res","json","code","rates","mid","catch","error","ExRateFetcher","handelOnClick","props","onClick","this","Component","transactions","childrenStyle","css","StyledSetter","styled","div","StyledExRateComponent","ExRateComponent","rateInputValue","onChangeInputValue","setState","target","uiKey","uuid","v4","StyledNewTransactionComponent","NewTransactionComponent","newTransactionName","newTransactionAmountEUR","onNewTransactionNameChange","onNewTransactionAmountChange","onSubmitTransaction","transactionUID","transaction","uid","amountEUR","amountPLN","addTransaction","displayedName","displayedAmountEUR","onChange","dispatchForNewTransaction","StyledTransactionsDisplayComponent","ul","dispatchForTransactionsDisplay","removeTransaction","transactionsList","map","toFixed","toString","key","id","StyledBiggestTrans","getBiggestTrans","createSelector","reduce","biggest","transactionToReturn","biggestTransaction","StyledTransSumComponent","getTransactions","getSumEUR","sum","getSumPLN","sumEUR","sumPLN","StyledDashboard","StyledTransactionPanel","DashboardComponent","App","className","Boolean","window","location","hostname","match","initialExRate","initialTransactions","cantorApp","combineReducers","action","filter","preloadedState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3793c318.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nconst ExRateDisplay = ({ exRate }) => (\n  <div>\n    <label>1 EUR</label>\n    <label>=</label>\n    <label>{exRate} PLN</label>\n  </div>\n);\n\nconst propsMapForExRateDisplay = state => {\n  return {\n    exRate: state.exRate\n  }\n};\n\nexport default connect(propsMapForExRateDisplay)(ExRateDisplay);\n\n\n","export const SET_RATE = \"SET_RATE\";\nexport const ADD_TRANSACTION = \"ADD_TRANSACTION\";\nexport const SET_NEW_AMOUNT = \"SET_NEW_AMOUNT\";\nexport const REMOVE_TRANSACTION = \"REMOVE_TRANSACTION\";\n\nexport const FETCH_RATE_BEGIN = \"FETCH_RATE_BEGIN\";\nexport const FETCH_RATE_SUCCESS = \"FETCH_RATE_SUCCESS\";\nexport const FETCH_RATE_CURRENCY_ERROR = \"FETCH_RATE_CURRENCY_ERROR\";\nexport const FETCH_RATE_FAILURE = \"FETCH_RATE_FAILURE\";\n\nexport const addTransaction = transaction => ({\n\ttype: ADD_TRANSACTION,\n\ttransaction\n});\n\nexport const removeTransaction = uid => ({\n\ttype: REMOVE_TRANSACTION,\n\tuid\n});\n\nexport const setNewAmount = amount => ({\n\ttype: SET_NEW_AMOUNT,\n\tamount\n});\n\nexport const setRate = exRate => ({\n\ttype: SET_RATE,\n\texRate\n});\n\nexport const fetchRateBegin = () => ({\n\ttype: FETCH_RATE_BEGIN\n});\n\nexport const fetchRateSuccess = exRate => ({\n\ttype: FETCH_RATE_SUCCESS,\n\texRate\n});\n\nexport const fetchRateCurrencyError = currencyCode => ({\n\ttype: FETCH_RATE_CURRENCY_ERROR\n});\n\nexport const fetchRateFailure = error => ({\n\ttype: FETCH_RATE_FAILURE\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { setRate } from \"../../utilities/actions\";\n\nconst ExRateSetter = ({ exRate, setRate }) => {\n\tlet rateInput = React.createRef();\n\n\tconst handelSubmit = event => {\n\t\tevent.preventDefault();\n\t\tsetRate(parseFloat(rateInput.current.value));\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<form onSubmit={handelSubmit}>\n\t\t\t\t<label>\n\t\t\t\t\tRate:\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tname=\"rate\"\n\t\t\t\t\t\tstep=\"0.0001\"\n\t\t\t\t\t\tmax=\"999999\"\n\t\t\t\t\t\tmin=\"0.0001\"\n\n\t\t\t\t\t\tdefaultValue={exRate}\n\t\t\t\t\t\tref={rateInput}\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\t\t\t\t<input type=\"submit\" value=\"Set rate\" />\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nconst propsForExRateSetter = state => {\n\treturn {\n\t\texRate: state.exRate\n\t};\n};\n\nconst dispatchForExRateSetter = { setRate };\n\nexport default connect(\n\tpropsForExRateSetter,\n\tdispatchForExRateSetter\n)(ExRateSetter);\n","import { fetchRateBegin, \n         setRate, \n         fetchRateCurrencyError, \n         fetchRateFailure } from './actions';\n\nconst NBP_QUERY = 'http://api.nbp.pl/api/exchangerates/rates/a/eur?format=json';\n\nexport const fetchRate = () => {\n  return(\n    dispatch => {\n      dispatch(fetchRateBegin());\n      return fetch(NBP_QUERY)\n        .then(res => res.json())\n        .then(json => {\n          if (json.code === \"EUR\") {\n            dispatch(setRate(json.rates[0].mid))\n          } else {\n            dispatch(fetchRateCurrencyError(json.code))\n          }\n        })\n        .catch(error => dispatch(fetchRateFailure(error)))\n    }\n  )\n}","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { fetchRate } from '../../utilities/fetchRate';\n\n\nclass ExRateFetcher extends React.Component {\n\thandelOnClick = () => {\n\t\tthis.props.dispatch(fetchRate());\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<label>Aktualny kurs NBP</label>\n\t\t\t\t<input type=\"button\" value=\"Pobierz\" onClick={this.handelOnClick} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst propsForExRateFetcher = state => {\n\treturn {\n\t\ttransactions: state.transactions,\n\t\texRate: state.exRate\n\t};\n};\n\n// const dispatchForExRateFetcher = { setNewAmountPLN };\n\nexport default connect(\n\tpropsForExRateFetcher\n\t// , dispatchForExRateFetcher\n  )(ExRateFetcher);\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\n\nimport ExRateDisplay from \"./ExRateDisplay\";\nimport ExRateSetter from \"./ExRateSetter\";\nimport ExRateFetcher from \"./ExRateFetcher\";\n\nconst childrenStyle = css`\n\tlabel {\n\t\tpadding: 5px;\n\t}\n\t> div {\n\t\tpadding: 10px 5px;\n\t}\n`;\n\nconst StyledSetter = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\t${childrenStyle}\n`;\n\nconst StyledExRateComponent = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\n\tborder-bottom: solid 2px white;\n\n\twidth: 100%;\n\tpadding: 5px 0 15px 0;\n\tmargin-bottom: 5px;\n`;\n\nexport default class ExRateComponent extends React.Component {\n\tstate = { rateInputValue: \"0.0000\" };\n\n\tonChangeInputValue = event => {\n\t\tthis.setState({\n\t\t\trateInputValue: event.target.value\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<StyledExRateComponent>\n\t\t\t\t<ExRateDisplay />\n\t\t\t\t<StyledSetter>\n\t\t\t\t\t<ExRateSetter />\n\t\t\t\t\t<ExRateFetcher />\n\t\t\t\t</StyledSetter>\n\t\t\t</StyledExRateComponent>\n\t\t);\n\t}\n}\n","import uuid from \"uuid\";\n\nconst uiKey = () => {\n  return uuid.v4()\n}\n\nexport default uiKey;","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { connect } from 'react-redux';\n\nimport { addTransaction } from '../../utilities/actions';\nimport uiKey from '../../utilities/uuidGenerator';\n\nconst childrenStyle = css`\n* {\n  margin: 5px;\n}\n`\n\nconst StyledNewTransactionComponent = styled.div`\n  border-bottom: solid 2px white;\n  width: 100%;\n  padding: 5px 0 15px 0;\n  margin-bottom: 5px;\n  ${childrenStyle}\n`\n\nclass NewTransactionComponent extends React.Component { \n\n  state = {\n    newTransactionName: \"New Transaction\", \n    newTransactionAmountEUR: \"450.00\"\n  }\n\n  onNewTransactionNameChange = event => {\n    this.setState({\n      newTransactionName: event.target.value\n    })\n  }\n\n  onNewTransactionAmountChange = event => {\n    this.setState({\n      newTransactionAmountEUR: parseFloat(event.target.value)\n    })\n  }\n\n  onSubmitTransaction = event => {\n    event.preventDefault();\n    const transactionUID = uiKey();\n    const newTransactionName = this.state.newTransactionName;\n    const newTransactionAmountEUR = parseFloat(this.state.newTransactionAmountEUR);\n    const calculatedAmountPLN = newTransactionAmountEUR * this.props.exRate;\n    const transaction = {\n      uid:        transactionUID,\n      name:       newTransactionName,\n      amountEUR:  newTransactionAmountEUR,\n      amountPLN:  calculatedAmountPLN\n\n    }\n    this.props.addTransaction(transaction)\n  }\n\n  render(){\n    const { newTransactionAmountEUR, newTransactionName } = this.state;\n    const displayedName = newTransactionName ? newTransactionName : \"Bez nazwy\";\n    const displayedAmountEUR = newTransactionAmountEUR ? newTransactionAmountEUR : \"0.00\";\n    return(\n      <StyledNewTransactionComponent>\n        <div>\n          <label>{displayedName}</label>\n          <label>{displayedAmountEUR}</label>\n        </div>\n        <div>\n          <form onSubmit={this.onSubmitTransaction}>\n            <label>Nazwa</label>\n            <input type=\"text\" \n                   name=\"newTransactionName\" \n                   value={newTransactionName} \n                   onChange={this.onNewTransactionNameChange} />\n            <label>Kwota</label>\n            <input type=\"number\" \n                   step=\"0.01\"\n                   max=\"999999\"\n                   min=\"0.01\"\n                   name=\"newTransactionAmountEUR\" \n                   value={newTransactionAmountEUR} \n                   onChange={this.onNewTransactionAmountChange} />\n            <input type=\"submit\"\n                   value=\"+\" />\n          </form>\n        </div>\n      </StyledNewTransactionComponent>)}}\n\nconst propsForNewTransaction = state => {\n  return(\n    {\n      exRate: state.exRate\n    }\n  )\n}\n\nconst dispatchForNewTransaction = { addTransaction };\n\nexport default connect(propsForNewTransaction, dispatchForNewTransaction)(NewTransactionComponent);","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\n\nimport { removeTransaction } from \"../../utilities/actions\";\n\nconst StyledTransactionsDisplayComponent = styled.ul`\n\t\n\twidth: 100%;\n\tpadding: 5px 0 15px 0;\n\tmargin-bottom: 5px;\n\n\tlist-style: none;\n`;\n\nconst TransactionsDisplayComponent = ({\n\ttransactionsList,\n\tremoveTransaction\n}) => {\n\treturn (\n\t\t<StyledTransactionsDisplayComponent>\n\t\t\t{transactionsList.map(({ uid, name, amountPLN, amountEUR }) => {\n\t\t\t\tamountPLN = amountPLN.toFixed(2).toString();\n\t\t\t\tamountEUR = amountEUR.toFixed(2).toString();\n\t\t\t\treturn (\n\t\t\t\t\t<li key={uid}>\n\t\t\t\t\t\t<label>Nazwa: {name}</label>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t{amountEUR} Euro = {amountPLN} Zł\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<button onClick={id => removeTransaction(uid)}>-</button>\n\t\t\t\t\t</li>\n\t\t\t\t);\n\t\t\t})}\n\t\t</StyledTransactionsDisplayComponent>\n\t);\n};\n\nconst propsForTransactionsDisplay = state => {\n\treturn {\n\t\ttransactionsList: state.transactions\n\t};\n};\n\nconst dispatchForTransactionsDisplay = { removeTransaction };\n\nexport default connect(\n\tpropsForTransactionsDisplay,\n\tdispatchForTransactionsDisplay\n)(TransactionsDisplayComponent);\n","import React from 'react';\nimport styled from 'styled-components';\nimport {connect} from 'react-redux';\nimport { createSelector } from 'reselect'\n\nconst StyledBiggestTrans = styled.div`\n  color: red;\n`;\n\nconst BiggestTransComponent = ({biggestTransaction}) => {\n  let { name, amountPLN, amountEUR } = biggestTransaction;\n  amountPLN = amountPLN.toFixed(2).toString();\n\tamountEUR = amountEUR.toFixed(2).toString();\n  return(\n    <StyledBiggestTrans>\n      <h4>Największa</h4>\n      <label>{name}</label><br/>\n      <label>{amountPLN} Zł</label><br/>\n      <label>{amountEUR} Euro</label>\n    </StyledBiggestTrans>\n  )\n}\n\nconst getTransactions = state => state.transactions;\n\nconst getBiggestTrans = createSelector(\n  [getTransactions],\n  (transactions) => {\n    const biggest = transactions.reduce(\n      \n      (biggest, transaction) => {\n        return biggest.amountPLN > transaction.amountPLN \n          ? biggest \n          : {amountPLN: transaction.amountPLN, transactionToReturn: transaction}\n      }, {amountPLN: 0, transactionToReturn: null}\n    )\n    return biggest.transactionToReturn\n  }\n)\n\nconst propsForBiggestTransComponent = state => {\n  return {\n    biggestTransaction: getBiggestTrans(state)\n  }\n}\n\nexport default connect(propsForBiggestTransComponent)(BiggestTransComponent)","import React from 'react';\nimport styled, {css} from 'styled-components';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect'\n\nconst childrenStyle = css`\n\tlabel {\n\t\tpadding: 5px;\n\t}\n\t> div {\n\t\tpadding: 10px 5px;\n\t}\n`;\n\nconst StyledTransSumComponent = styled.div`\n  display: flex;\n\tflex-direction: row;\n\t${childrenStyle}\n`;\n\nconst TransSumComponent = ({ sumEUR, sumPLN }) => {\n  return(\n    <StyledTransSumComponent>\n      <label>Suma operacji: </label>\n      <label>{sumEUR} Euro</label>\n      <label>{sumPLN} Zł</label>\n    </StyledTransSumComponent>\n  )\n}\n\nconst getTransactions = state => state.transactions;\n\nconst getSumEUR = createSelector(\n  [ getTransactions ],\n  (transactions) => transactions.reduce(\n    (sum, transaction) => {\n      let newSum = parseFloat(sum) + parseFloat(transaction.amountEUR);\n      return newSum.toFixed(2)\n    }, 0)\n)\n\nconst getSumPLN = createSelector(\n  [ getTransactions ],\n  (transactions) => transactions.reduce(\n    (sum, transaction) => {\n      let newSum = parseFloat(sum) + parseFloat(transaction.amountPLN);\n      return newSum.toFixed(2)\n    }, 0)\n)\n\nconst propsToTransSum = state => {\n  return {\n    sumEUR: getSumEUR(state),\n    sumPLN: getSumPLN(state)\n  }\n}\n\nexport default connect(propsToTransSum)(TransSumComponent)","import React from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\n\nimport ExRateComponent from './ExRateComponent/ExRateComponent';\nimport NewTransactionComponent from './NewTransactionComponent/NewTransactionComponent';\nimport TransactionsDisplayComponent from './TransactionsDisplayComponent/TransactionsDisplayComponent';\nimport BiggestTransComponent from './TransactionsDisplayComponent/BiggestTransDisplayComponent';\nimport TransSumComponent from './TransSumComponent/TransSumComponent'\n\nconst StyledDashboard = styled.div`\n  \n`\n\nconst StyledTransactionPanel = styled.div`\n  display: flex;\n  flex-direction: row;\n  border-bottom: solid 2px white;\n  \n`\n\nclass DashboardComponent extends React.Component {\n  \n  render() {\n    return (\n      <StyledDashboard>\n        <ExRateComponent />\n        <NewTransactionComponent />\n        \n        <StyledTransactionPanel>\n          <TransactionsDisplayComponent />\n          <BiggestTransComponent />\n        </StyledTransactionPanel>\n\n        <TransSumComponent />\n      </StyledDashboard>\n    )\n  }\n}\n\nexport default connect()(DashboardComponent)","import React from 'react';\n\nimport './App.css';\nimport Dashboard from './components/DashboardComponent';\n\nfunction App() {\n  return (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <h1>Currency Exchange</h1>\n    </header>\n    <main>\n      <Dashboard/>\n    </main>\n  </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { SET_RATE, FETCH_RATE_SUCCESS } from \"./actions\";\nimport { ADD_TRANSACTION, SET_NEW_AMOUNT, REMOVE_TRANSACTION } from \"./actions\";\n\nimport uiKey from \"./uuidGenerator\";\n\nconst initialExRate = \"0.0000\";\n\nconst transactionUID = uiKey();\nconst initialTransactions = [\n\t{\n\t\tuid: transactionUID,\n\t\tname: \"form reducer\",\n\t\tamountPLN: \"666\",\n\t\tamountEUR: \"777\"\n\t}\n];\n\nfunction exRate(state = initialExRate, action) {\n\tswitch (action.type) {\n\t\tcase SET_RATE:\n\t\t\treturn action.exRate;\n\n\t\tcase FETCH_RATE_SUCCESS:\n\t\t\treturn action.exRate;\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nfunction transactions(state = initialTransactions, action) {\n\tswitch (action.type) {\n\t\tcase ADD_TRANSACTION:\n\t\t\treturn [...state, action.transaction];\n\n\t\tcase REMOVE_TRANSACTION:\n\t\t\t\treturn state.filter(transaction =>\n\t\t\t\ttransaction.uid !== action.uid ? transaction : null\n\t\t\t);\n\t\tcase SET_RATE:\n\t\t\treturn state.map(\n\t\t\t\t(transaction => {\n\t\t\t\t\treturn {...transaction, amountPLN: transaction.amountEUR * action.exRate}\n\t\t\t\t})\n\t\t\t);\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst cantorApp = combineReducers({\n\texRate,\n\ttransactions\n});\n\nexport default cantorApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport cantorApp from './utilities/reducers';\nimport thunk from 'redux-thunk';\n\nimport { fetchRate } from './utilities/fetchRate';\n\nimport uiKey from './utilities/uuidGenerator';\n\nconst transactionUID = uiKey();\nconst initialTransactions = [{uid: transactionUID, name: \"from createStore\", amountPLN: 666, amountEUR: 777}]\n\n\nconst preloadedState = {\n  exRate: \"1.0000\",\n  transactions: initialTransactions\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  cantorApp,\n  preloadedState,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nstore.dispatch(fetchRate());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')  \n);\n  \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}